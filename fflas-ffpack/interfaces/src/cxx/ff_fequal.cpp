/* ------------------------------------------------------------------ -*- c++ -*-
 *
 * (c) SILKAN           - 2014-2016
 *     Generated by the 'ffinterg' tool (v0.4)
 *
 * ========LICENCE========
 * This file is part of the library FFLAS-FFPACK.
 *
 * FFLAS-FFPACK is free software: you can redistribute it and/or modify
 * it under the terms of the  GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 * ========LICENCE========
 */

#include "ffintert_cxx.h"
#include "fflas-ffpack/fflas/fflas.h"

using namespace FFLAS;
using namespace Givaro;
/* -------------------------------------------------------------------------- */


/* -------------------------------------------------------------------------- */

bool ff_fequal(int32_t p, size_t n, const int32_t* _tmp0, size_t _tmp1, const int32_t* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<int32_t>(p), n, Modular<int32_t>::ConstElement_ptr(_tmp0), _tmp1, Modular<int32_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<int32_t>(p), n, ModularBalanced<int32_t>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<int32_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(int64_t p, size_t n, const int64_t* _tmp0, size_t _tmp1, const int64_t* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<int64_t>(p), n, Modular<int64_t>::ConstElement_ptr(_tmp0), _tmp1, Modular<int64_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<int64_t>(p), n, ModularBalanced<int64_t>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<int64_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(Integer p, size_t n, const Integer* _tmp0, size_t _tmp1, const Integer* _tmp2, size_t _tmp3)
{
  bool b = fequal(Modular<Integer>(p), n, Modular<Integer>::ConstElement_ptr(_tmp0), _tmp1, Modular<Integer>::ConstElement_ptr(_tmp2), _tmp3);
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(float p, size_t n, const float* _tmp0, size_t _tmp1, const float* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<float>(p), n, Modular<float>::ConstElement_ptr(_tmp0), _tmp1, Modular<float>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<float>(p), n, ModularBalanced<float>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<float>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(double p, size_t n, const double* _tmp0, size_t _tmp1, const double* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<double>(p), n, Modular<double>::ConstElement_ptr(_tmp0), _tmp1, Modular<double>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<double>(p), n, ModularBalanced<double>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<double>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(int32_t p, size_t m, size_t n, const int32_t* _tmp0, size_t _tmp1, const int32_t* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<int32_t>(p), m, n, Modular<int32_t>::ConstElement_ptr(_tmp0), _tmp1, Modular<int32_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<int32_t>(p), m, n, ModularBalanced<int32_t>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<int32_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(int64_t p, size_t m, size_t n, const int64_t* _tmp0, size_t _tmp1, const int64_t* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<int64_t>(p), m, n, Modular<int64_t>::ConstElement_ptr(_tmp0), _tmp1, Modular<int64_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<int64_t>(p), m, n, ModularBalanced<int64_t>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<int64_t>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(Integer p, size_t m, size_t n, const Integer* _tmp0, size_t _tmp1, const Integer* _tmp2, size_t _tmp3)
{
  bool b = fequal(Modular<Integer>(p), m, n, Modular<Integer>::ConstElement_ptr(_tmp0), _tmp1, Modular<Integer>::ConstElement_ptr(_tmp2), _tmp3);
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(float p, size_t m, size_t n, const float* _tmp0, size_t _tmp1, const float* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<float>(p), m, n, Modular<float>::ConstElement_ptr(_tmp0), _tmp1, Modular<float>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<float>(p), m, n, ModularBalanced<float>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<float>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}


/* -------------------------------------------------------------------------- */

bool ff_fequal(double p, size_t m, size_t n, const double* _tmp0, size_t _tmp1, const double* _tmp2, size_t _tmp3, FP_C_RP fp_rp)
{
  bool b = 0;
  if ((fp_rp == FP_C_RP_Modular)) {
    b = fequal(Modular<double>(p), m, n, Modular<double>::ConstElement_ptr(_tmp0), _tmp1, Modular<double>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    b = fequal(ModularBalanced<double>(p), m, n, ModularBalanced<double>::ConstElement_ptr(_tmp0), _tmp1, ModularBalanced<double>::ConstElement_ptr(_tmp2), _tmp3);
    return b;
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
  return b;
}

