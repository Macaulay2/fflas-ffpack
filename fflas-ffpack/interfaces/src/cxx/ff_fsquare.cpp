/* ------------------------------------------------------------------ -*- c++ -*-
 *
 * (c) SILKAN           - 2014-2016
 *     Generated by the 'ffinterg' tool (v0.4)
 *
 * ========LICENCE========
 * This file is part of the library FFLAS-FFPACK.
 *
 * FFLAS-FFPACK is free software: you can redistribute it and/or modify
 * it under the terms of the  GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 * ========LICENCE========
 */

#include "ffintert_cxx.h"
#include "fflas-ffpack/fflas/fflas.h"

using namespace FFLAS;
using namespace Givaro;
/* -------------------------------------------------------------------------- */


/* -------------------------------------------------------------------------- */

void ff_fsquare(int32_t p, FFLAS_C_TRANSPOSE _tmp0, size_t n, int32_t alpha, const int32_t* _tmp1, size_t _tmp2, int32_t beta, int32_t* _tmp3, size_t _tmp4, FP_C_RP fp_rp)
{
  if ((fp_rp == FP_C_RP_Modular)) {
    fsquare(Modular<int32_t>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), Modular<int32_t>::ConstElement_ptr(_tmp1), _tmp2, (beta), Modular<int32_t>::Element_ptr(_tmp3), _tmp4);
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    fsquare(ModularBalanced<int32_t>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), ModularBalanced<int32_t>::ConstElement_ptr(_tmp1), _tmp2, (beta), ModularBalanced<int32_t>::Element_ptr(_tmp3), _tmp4);
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
}


/* -------------------------------------------------------------------------- */

void ff_fsquare(int64_t p, FFLAS_C_TRANSPOSE _tmp0, size_t n, int64_t alpha, const int64_t* _tmp1, size_t _tmp2, int64_t beta, int64_t* _tmp3, size_t _tmp4, FP_C_RP fp_rp)
{
  if ((fp_rp == FP_C_RP_Modular)) {
    fsquare(Modular<int64_t>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), Modular<int64_t>::ConstElement_ptr(_tmp1), _tmp2, (beta), Modular<int64_t>::Element_ptr(_tmp3), _tmp4);
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    fsquare(ModularBalanced<int64_t>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), ModularBalanced<int64_t>::ConstElement_ptr(_tmp1), _tmp2, (beta), ModularBalanced<int64_t>::Element_ptr(_tmp3), _tmp4);
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
}


/* -------------------------------------------------------------------------- */

void ff_fsquare(Integer p, FFLAS_C_TRANSPOSE _tmp0, size_t n, Integer alpha, const Integer* _tmp1, size_t _tmp2, Integer beta, Integer* _tmp3, size_t _tmp4)
{
  fsquare(Modular<Integer>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), Modular<Integer>::ConstElement_ptr(_tmp1), _tmp2, (beta), Modular<Integer>::Element_ptr(_tmp3), _tmp4);
}


/* -------------------------------------------------------------------------- */

void ff_fsquare(float p, FFLAS_C_TRANSPOSE _tmp0, size_t n, float alpha, const float* _tmp1, size_t _tmp2, float beta, float* _tmp3, size_t _tmp4, FP_C_RP fp_rp)
{
  if ((fp_rp == FP_C_RP_Modular)) {
    fsquare(Modular<float>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), Modular<float>::ConstElement_ptr(_tmp1), _tmp2, (beta), Modular<float>::Element_ptr(_tmp3), _tmp4);
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    fsquare(ModularBalanced<float>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), ModularBalanced<float>::ConstElement_ptr(_tmp1), _tmp2, (beta), ModularBalanced<float>::Element_ptr(_tmp3), _tmp4);
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
}


/* -------------------------------------------------------------------------- */

void ff_fsquare(double p, FFLAS_C_TRANSPOSE _tmp0, size_t n, double alpha, const double* _tmp1, size_t _tmp2, double beta, double* _tmp3, size_t _tmp4, FP_C_RP fp_rp)
{
  if ((fp_rp == FP_C_RP_Modular)) {
    fsquare(Modular<double>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), Modular<double>::ConstElement_ptr(_tmp1), _tmp2, (beta), Modular<double>::Element_ptr(_tmp3), _tmp4);
  } else if ((fp_rp == FP_C_RP_ModularBalanced)) {
    fsquare(ModularBalanced<double>(p), (FFLAS::FFLAS_TRANSPOSE) (_tmp0), n, (alpha), ModularBalanced<double>::ConstElement_ptr(_tmp1), _tmp2, (beta), ModularBalanced<double>::Element_ptr(_tmp3), _tmp4);
  } else {
    throw std::runtime_error("wrong field representation parameter.");
  }
}

