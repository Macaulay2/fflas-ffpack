/* ------------------------------------------------------------------ -*- c++ -*-
 *
 * (c) SILKAN           - 2014-2016
 * (c) ANR Project HPAC -  Generated by the 'ffinterg' tool (v0.4)
 *
 */

#include "ffintert_matlab.h"
bool ff_fiszero_0(double, size_t, ffintert::Vector<double>, size_t);
bool ff_fiszero_1(double, size_t, size_t, ffintert::Matrix<double>, size_t);



/* -------------------------------------------------------------------------- */

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
  if ((((nrhs == 2) && ffintert::isField(prhs[0])) && (ffintert::isVector(prhs[1]) && ffintert::isElement(prhs[1])))) {
    double F = ffintert::getField(prhs[0]);
    ffintert::Vector<double> X = ffintert::getVector(prhs[1]);
    size_t n = ffintert::length(X);
    size_t _tmp_0 = ffintert::st(X);
    bool b = ff_fiszero_0(F, n, X, _tmp_0);
    ffintert::createAndSetBool(plhs[0], b);
  } else if ((((nrhs == 2) && ffintert::isField(prhs[0])) && (ffintert::isMatrix(prhs[1]) && ffintert::isElement(prhs[1])))) {
    double F = ffintert::getField(prhs[0]);
    ffintert::Matrix<double> A = ffintert::getMatrix(prhs[1]);
    size_t m = ffintert::rows(A);
    size_t n = ffintert::cols(A);
    size_t _tmp_0 = ffintert::ld(A);
    bool b = ff_fiszero_1(F, n, m, A, _tmp_0);
    ffintert::createAndSetBool(plhs[0], b);
  } else {
    ffintert::error("wrong arguments types (or number) for routine: fiszero.");
  }  
}

