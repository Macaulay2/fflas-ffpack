/* ------------------------------------------------------------------ -*- c++ -*-
 *
 * (c) SILKAN           - 2014-2016
 * (c) ANR Project HPAC -  Generated by the 'ffinterg' tool (v0.4)
 *
 */

#include "ffintert_matlab.h"
int ff_fsquare_0(double, ffintert::FlagTrans, size_t, double, ffintert::Matrix<double>, size_t, double, ffintert::Matrix<double>, size_t);



/* -------------------------------------------------------------------------- */

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
  if (((((((nrhs == 5) && ffintert::isField(prhs[0])) && ffintert::isElement(prhs[1])) && (ffintert::isMatrix(prhs[2]) && ffintert::isElement(prhs[2]))) && ffintert::isElement(prhs[3])) && (ffintert::isMatrix(prhs[4]) && ffintert::isElement(prhs[4])))) {
    double F = ffintert::getField(prhs[0]);
    double alpha = ffintert::getElement(prhs[1]);
    ffintert::Matrix<double> A = ffintert::getMatrix(prhs[2]);
    double beta = ffintert::getElement(prhs[3]);
    ffintert::Matrix<double> C = ffintert::duplicateMatrix(prhs[4], plhs[0]);
    size_t n = ffintert::rows(A);
    ffintert::check(n, ffintert::rows(C), "n");
    ffintert::check(n, ffintert::cols(A), "n");
    ffintert::check(n, ffintert::cols(C), "n");
    ffintert::FlagTrans _tmp_0 = ffintert::NoTrans;
    size_t _tmp_1 = ffintert::ld(A);
    size_t _tmp_2 = ffintert::ld(C);
    ff_fsquare_0(F, _tmp_0, n, alpha, A, _tmp_1, beta, C, _tmp_2);
  } else {
    ffintert::error("wrong arguments types (or number) for routine: fsquare.");
  }  
}

