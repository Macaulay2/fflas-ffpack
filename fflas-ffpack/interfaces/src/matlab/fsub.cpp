/* ------------------------------------------------------------------ -*- c++ -*-
 *
 * (c) SILKAN           - 2014-2016
 * (c) ANR Project HPAC -  Generated by the 'ffinterg' tool (v0.4)
 *
 */

#include "ffintert_matlab.h"
int ff_fsub_0(double, size_t, ffintert::Vector<double>, size_t, ffintert::Vector<double>, size_t, ffintert::Vector<double>, size_t);
int ff_fsub_1(double, size_t, size_t, ffintert::Matrix<double>, size_t, ffintert::Matrix<double>, size_t, ffintert::Matrix<double>, size_t);



/* -------------------------------------------------------------------------- */

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
  if (((((nrhs == 3) && ffintert::isField(prhs[0])) && (ffintert::isVector(prhs[1]) && ffintert::isElement(prhs[1]))) && (ffintert::isVector(prhs[2]) && ffintert::isElement(prhs[2])))) {
    double F = ffintert::getField(prhs[0]);
    ffintert::Vector<double> X = ffintert::getVector(prhs[1]);
    ffintert::Vector<double> Y = ffintert::getVector(prhs[2]);
    size_t n = ffintert::length(X);
    ffintert::check(n, ffintert::length(Y), "n");
    size_t _tmp_0 = ffintert::st(X);
    size_t _tmp_1 = ffintert::st(Y);
    ffintert::Vector<double> Z = ffintert::createVector(plhs[0], n);
    size_t _tmp_2 = ffintert::st(Z);
    ff_fsub_0(F, n, X, _tmp_0, Y, _tmp_1, Z, _tmp_2);
  } else if (((((nrhs == 3) && ffintert::isField(prhs[0])) && (ffintert::isMatrix(prhs[1]) && ffintert::isElement(prhs[1]))) && (ffintert::isMatrix(prhs[2]) && ffintert::isElement(prhs[2])))) {
    double F = ffintert::getField(prhs[0]);
    ffintert::Matrix<double> A = ffintert::getMatrix(prhs[1]);
    ffintert::Matrix<double> B = ffintert::getMatrix(prhs[2]);
    size_t m = ffintert::rows(A);
    ffintert::check(m, ffintert::rows(B), "m");
    size_t n = ffintert::cols(A);
    ffintert::check(n, ffintert::cols(B), "n");
    size_t _tmp_0 = ffintert::ld(A);
    size_t _tmp_1 = ffintert::ld(B);
    ffintert::Matrix<double> C = ffintert::createMatrix(plhs[0], m, n);
    size_t _tmp_2 = ffintert::ld(C);
    ff_fsub_1(F, n, m, A, _tmp_0, B, _tmp_1, C, _tmp_2);
  } else {
    ffintert::error("wrong arguments types (or number) for routine: fsub.");
  }  
}

