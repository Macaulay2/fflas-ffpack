/* ------------------------------------------------------------------ -*- c++ -*-
 *
 * (c) SILKAN           - 2014-2016
 * (c) ANR Project HPAC -  Generated by the 'ffinterg' tool (v0.4)
 *
 */

#include "ffintert_matlab.h"
int ff_ftrmm_0(double, ffintert::FlagSide, ffintert::FlagUplo, ffintert::FlagTrans, ffintert::FlagDiag, size_t, size_t, double, ffintert::Matrix<double>, size_t, ffintert::Matrix<double>, size_t);



/* -------------------------------------------------------------------------- */

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
  if (((((((((nrhs == 7) && ffintert::isField(prhs[0])) && ffintert::isSide(prhs[1])) && ffintert::isUplo(prhs[2])) && ffintert::isDiag(prhs[3])) && ffintert::isElement(prhs[4])) && (ffintert::isMatrix(prhs[5]) && ffintert::isElement(prhs[5]))) && (ffintert::isMatrix(prhs[6]) && ffintert::isElement(prhs[6])))) {
    double F = ffintert::getField(prhs[0]);
    ffintert::FlagSide S = ffintert::getSide(prhs[1]);
    ffintert::FlagUplo U = ffintert::getUplo(prhs[2]);
    ffintert::FlagDiag D = ffintert::getDiag(prhs[3]);
    double alpha = ffintert::getElement(prhs[4]);
    ffintert::Matrix<double> A = ffintert::getMatrix(prhs[5]);
    ffintert::Matrix<double> B = ffintert::duplicateMatrix(prhs[6], plhs[0]);
    size_t m = ffintert::rows(B);
    size_t n = ffintert::cols(B);
    ffintert::FlagSide _tmp_0 = ffintert::invert(S);
    ffintert::FlagUplo _tmp_1 = ffintert::invert(U);
    ffintert::FlagTrans _tmp_2 = ffintert::NoTrans;
    size_t _tmp_3 = ffintert::ld(A);
    size_t _tmp_4 = ffintert::ld(B);
    ff_ftrmm_0(F, _tmp_0, _tmp_1, _tmp_2, D, n, m, alpha, A, _tmp_3, B, _tmp_4);
  } else {
    ffintert::error("wrong arguments types (or number) for routine: ftrmm.");
  }  
}

