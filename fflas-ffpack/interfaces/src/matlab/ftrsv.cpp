/* ------------------------------------------------------------------ -*- c++ -*-
 *
 * (c) SILKAN           - 2014-2016
 *     Generated by the 'ffinterg' tool (v0.4)
 *
 * ========LICENCE========
 * This file is part of the library FFLAS-FFPACK.
 *
 * FFLAS-FFPACK is free software: you can redistribute it and/or modify
 * it under the terms of the  GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 * ========LICENCE========
 */

#include "ffintert_matlab.h"
using namespace ffintert;

void ff_ftrsv(int32_t, FFLAS_C_UPLO, FFLAS_C_TRANSPOSE, FFLAS_C_DIAG, size_t, const int32_t*, size_t, int32_t*, size_t, FP_C_RP = FP_C_RP_ModularBalanced);
void ff_ftrsv(int64_t, FFLAS_C_UPLO, FFLAS_C_TRANSPOSE, FFLAS_C_DIAG, size_t, const int64_t*, size_t, int64_t*, size_t, FP_C_RP = FP_C_RP_ModularBalanced);
void ff_ftrsv(Integer, FFLAS_C_UPLO, FFLAS_C_TRANSPOSE, FFLAS_C_DIAG, size_t, const Integer*, size_t, Integer*, size_t);
void ff_ftrsv(float, FFLAS_C_UPLO, FFLAS_C_TRANSPOSE, FFLAS_C_DIAG, size_t, const float*, size_t, float*, size_t, FP_C_RP = FP_C_RP_ModularBalanced);
void ff_ftrsv(double, FFLAS_C_UPLO, FFLAS_C_TRANSPOSE, FFLAS_C_DIAG, size_t, const double*, size_t, double*, size_t, FP_C_RP = FP_C_RP_ModularBalanced);



/* -------------------------------------------------------------------------- */

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[])
{
  if (((((((nrhs == 5) && isElement<int32_t>(prhs[0])) && isUplo(prhs[1])) && isDiag(prhs[2])) && isMatrix<int32_t>(prhs[3])) && isVector<int32_t>(prhs[4]))) {
    int32_t p = getElement<int32_t>(prhs[0]);
    FFLAS_C_UPLO U = getUplo(prhs[1]);
    FFLAS_C_DIAG D = getDiag(prhs[2]);
    Matrix<int32_t> A = getMatrix<int32_t>(prhs[3]);
    Vector<int32_t> X = duplicateVector<int32_t>(prhs[4], plhs[0]);
    size_t n = length(X);
    check(n, rows(A), "n");
    check(n, cols(A), "n");
    FFLAS_C_UPLO _tmp_0 = invert(U);
    FFLAS_C_TRANSPOSE _tmp_1 = FflasTrans;
    const int32_t* _tmp_2 = constptr(A);
    size_t _tmp_3 = ld(A);
    int32_t* _tmp_4 = ptr(X);
    size_t _tmp_5 = st(X);
    ff_ftrsv(p, _tmp_0, _tmp_1, D, n, _tmp_2, _tmp_3, _tmp_4, _tmp_5);
  } else if (((((((nrhs == 5) && isElement<int64_t>(prhs[0])) && isUplo(prhs[1])) && isDiag(prhs[2])) && isMatrix<int64_t>(prhs[3])) && isVector<int64_t>(prhs[4]))) {
    int64_t p = getElement<int64_t>(prhs[0]);
    FFLAS_C_UPLO U = getUplo(prhs[1]);
    FFLAS_C_DIAG D = getDiag(prhs[2]);
    Matrix<int64_t> A = getMatrix<int64_t>(prhs[3]);
    Vector<int64_t> X = duplicateVector<int64_t>(prhs[4], plhs[0]);
    size_t n = length(X);
    check(n, rows(A), "n");
    check(n, cols(A), "n");
    FFLAS_C_UPLO _tmp_0 = invert(U);
    FFLAS_C_TRANSPOSE _tmp_1 = FflasTrans;
    const int64_t* _tmp_2 = constptr(A);
    size_t _tmp_3 = ld(A);
    int64_t* _tmp_4 = ptr(X);
    size_t _tmp_5 = st(X);
    ff_ftrsv(p, _tmp_0, _tmp_1, D, n, _tmp_2, _tmp_3, _tmp_4, _tmp_5);
  } else if (((((((nrhs == 5) && isElement<float>(prhs[0])) && isUplo(prhs[1])) && isDiag(prhs[2])) && isMatrix<float>(prhs[3])) && isVector<float>(prhs[4]))) {
    float p = getElement<float>(prhs[0]);
    FFLAS_C_UPLO U = getUplo(prhs[1]);
    FFLAS_C_DIAG D = getDiag(prhs[2]);
    Matrix<float> A = getMatrix<float>(prhs[3]);
    Vector<float> X = duplicateVector<float>(prhs[4], plhs[0]);
    size_t n = length(X);
    check(n, rows(A), "n");
    check(n, cols(A), "n");
    FFLAS_C_UPLO _tmp_0 = invert(U);
    FFLAS_C_TRANSPOSE _tmp_1 = FflasTrans;
    const float* _tmp_2 = constptr(A);
    size_t _tmp_3 = ld(A);
    float* _tmp_4 = ptr(X);
    size_t _tmp_5 = st(X);
    ff_ftrsv(p, _tmp_0, _tmp_1, D, n, _tmp_2, _tmp_3, _tmp_4, _tmp_5);
  } else if (((((((nrhs == 5) && isElement<double>(prhs[0])) && isUplo(prhs[1])) && isDiag(prhs[2])) && isMatrix<double>(prhs[3])) && isVector<double>(prhs[4]))) {
    double p = getElement<double>(prhs[0]);
    FFLAS_C_UPLO U = getUplo(prhs[1]);
    FFLAS_C_DIAG D = getDiag(prhs[2]);
    Matrix<double> A = getMatrix<double>(prhs[3]);
    Vector<double> X = duplicateVector<double>(prhs[4], plhs[0]);
    size_t n = length(X);
    check(n, rows(A), "n");
    check(n, cols(A), "n");
    FFLAS_C_UPLO _tmp_0 = invert(U);
    FFLAS_C_TRANSPOSE _tmp_1 = FflasTrans;
    const double* _tmp_2 = constptr(A);
    size_t _tmp_3 = ld(A);
    double* _tmp_4 = ptr(X);
    size_t _tmp_5 = st(X);
    ff_ftrsv(p, _tmp_0, _tmp_1, D, n, _tmp_2, _tmp_3, _tmp_4, _tmp_5);
  } else {
    error("wrong arguments types (or number) for routine: ftrsv.");
  }
}

